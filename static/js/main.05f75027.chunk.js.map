{"version":3,"sources":["style/assets/down_arrow.svg","style/shared.js","components/Header.js","components/GameBoard.js","components/HiddenText.js","helpers/index.js","components/LettersTray.js","api/fetchGenres.js","components/GameControllers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colours","Container","styled","header","Heading","h1","Description","p","Header","appName","appDescription","GameBoard","children","LetterContainer","span","props","letter","HiddenText","filmArr","guessedLetters","map","index","key","indexOf","upprecaseLettersArr","Array","q","w","String","fromCharCode","allLetters","toLowerCase","getRandom","max","Math","floor","random","testFilm","str","test","getGenreId","genreName","genres","filter","genre","name","LettersContainer","div","Char","button","LettersTray","onClickHandler","char","i","onClick","e","target","innerHTML","value","disabled","fetchGenres","a","async","fetch","process","then","response","json","Button","Text","DropdownContainer","Select","select","downArrowSvg","Dropdown","onChange","title","options","option","API_MOVIEDB_KEY","MAX_ATTEMPTS","RESULTS_PAGES","EMPTY_FILM","poster_path","App","useState","counter","setCounter","film","setFilm","setGenres","selectedGenre","setSelectedGenre","letters","setGuessedLetters","isRevealed","setRevealed","gameOver","useEffect","result","length","genreId","id","filmPosition","results","fetchFilm","split","src","alt","overview","tagline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05f75027.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down_arrow.aa86276a.svg\";","export const colours = {\n  lightPink: '#dc98a4',\n  darkPink: '#c13d50',\n  turquoise: '#5c9d9f',\n  darkGrey: '#35324c',\n  lightGrey: '#c3cad8'\n}","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport { colours } from '../style/shared'\n\nconst Container = styled.header`\n  width: 100%; \n  background-color: ${colours.darkGrey};\n  color: ${colours.lightGrey};\n  font-weight: bold;\n  font-family: 'Courier New', Courier, monospace;\n  padding: 16px 32px;\n`\n\nconst Heading = styled.h1`\nmargin: 0;\n`\n\nconst Description = styled.p`\nmargin: 0;\ncolor: ${colours.lightPink};\n`\n\nconst Header = ({ appName, appDescription }) => (\n  <Container>\n    <Heading>{appName}</Heading>\n    <Description>{appDescription}</Description>\n  </Container>\n)\n\nexport default Header ","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport { colours } from '../style/shared'\n\nconst Container = styled.header`\n  width: 100%; \n  color: ${colours.darkGrey};\n  padding: 16px 32px;\n  font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif; \n  background-color: ${colours.lightGrey};\n  min-height: calc(100vh - 80px);\n`\n\nconst GameBoard = ({ children }) => <Container>{children}</Container>\n\nexport default GameBoard ","import React from 'react'\nimport styled from '@emotion/styled'\nimport { colours } from '../style/shared'\n\nconst LetterContainer = styled.span`\n  font-size: 16px;\n  height: 24px;\n  padding: 0 8px;\n  display: inline-block;\n  border-bottom: ${props => props.letter === ' ' ? 'none' : `2px solid ${colours.darkGrey}`};\n  color: ${colours.darkGrey};\n  text-align: center;\n  margin-right: 4px;\n`\n\n\n\nconst HiddenText = ({ filmArr, guessedLetters }) => {\n  return (\n    <>\n      {filmArr.map((letter, index) => <LetterContainer key={index} letter={letter}>{guessedLetters.indexOf(letter) > -1 ? letter : '?'}</LetterContainer>)}\n    </>\n  )\n}\n\nexport default HiddenText","export const upprecaseLettersArr = [...Array(26)].map((q, w) => String.fromCharCode(w + 65))\n\nexport const allLetters = [' ', \"'\", \":\", 1, 2, 3, 4, 5, 6, 7, 8, 9, ...upprecaseLettersArr, ...upprecaseLettersArr.map(letter => letter.toLowerCase())]\n\nexport const getRandom = max => Math.floor(max * Math.random())\n\nexport const testFilm = str => {\n  const regex = /^[A-Za-z ]+$/\n  return regex.test(str)\n};\n\nexport const getGenreId = (genreName, genres) => {\n  const selectedGenre = genres.filter(genre => genreName === genre.name)\n  return selectedGenre[0]\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { upprecaseLettersArr } from '../helpers'\n\nconst LettersContainer = styled.div`\n  display: flex;\n  flex-direction: row;\nflex-wrap: wrap;\nmargin: 32px auto;\n`\n\nconst Char = styled.button`\n  padding: 8px;\n  font-weight: bold;\n  margin: 2px;\n  width: 10%;\n`\n\nconst LettersTray = ({ guessedLetters, onClickHandler }) => <LettersContainer>{upprecaseLettersArr.map((char, i) => <Char onClick={e => onClickHandler(e.target.innerHTML)} key={i} value={char} disabled={guessedLetters.indexOf(char) > -1}>{char}</Char>)}</LettersContainer >\n\nexport default LettersTray","const API_MOVIEDB_KEY = process.env.REACT_APP_MOVIEDB_API_KEY;\n\nconst fetchGenres = async () => {\n  return await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_MOVIEDB_KEY}&language=en-US`,\n  ).then((response) => response.json());\n};\n\nexport default fetchGenres","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport { colours } from '../style/shared'\nimport downArrowSvg from '../style/assets/down_arrow.svg'\n\nexport const Button = styled.button`\n  color: ${colours.lightGrey};\n  font-weight: bold;\n  padding: 8px 16px;\n  background-color: ${colours.darkPink};\n  text-align: center;\n  -webkit-transition-duration: 0.2s; /* Safari */\n  transition-duration: 0.2s;\n  border: none;\n  width: 100%;\n  margin: 8px 0;\n  &:hover {\n    background-color: ${colours.darkGrey};\n    color: ${colours.lightPink};\n  }\n`\n\nconst Text = styled.span`\n  width: 200px;\n  `\n\nconst DropdownContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n  margin: 0;\n`\n\nconst Select = styled.select`\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-color: white;\n  background-image: url(${downArrowSvg});\n  background-size: 8px;\n  background-repeat: no-repeat;\n  background-position-y: 50%;\n  background-position-x: calc(100% - 8px);\n  text-align: left;\n  padding: 4px 8px;\n  margin-bottom: 8px;\n  cursor: pointer;\n  width: calc(100% - 60px);\n  border: 1px solid black;\n  border: none;\n  border-radius: 0;\n`\n\nexport const Dropdown = ({\n  onClick,\n  onChange,\n  title,\n  options,\n}) => (\n    <DropdownContainer>\n      <Text>{title}</Text>\n      <Select onClick={() => onClick('')} onChange={e => onChange(e.target.value)}>\n        <option\n          value={''}\n        />\n        {options.map((option, index) => (\n          <option\n            key={index}\n            value={option.name}\n          >\n            {option.name}\n          </option>\n        ))}\n      </Select>\n    </DropdownContainer>\n  )\n\n","import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header'\nimport GameBoard from './components/GameBoard'\nimport HiddenText from './components/HiddenText'\nimport LettersTray from './components/LettersTray'\nimport { allLetters, getRandom, testFilm, getGenreId } from './helpers'\nimport fetchGenres from './api/fetchGenres'\nimport { Button, Dropdown } from './components/GameControllers'\n\nconst API_MOVIEDB_KEY = process.env.REACT_APP_MOVIEDB_API_KEY;\nconst MAX_ATTEMPTS = 7\nconst RESULTS_PAGES = 6\nconst EMPTY_FILM = { title: '', poster_path: '' }\n\nfunction App() {\n  const [counter, setCounter] = useState(MAX_ATTEMPTS)\n  const [film, setFilm] = useState(EMPTY_FILM);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('Drama');\n  const [letters, setGuessedLetters] = useState([' ']);\n  const [isRevealed, setRevealed] = useState(false)\n\n  const onCharClickHandler = (char) => {\n    setGuessedLetters([...letters, char, char.toLowerCase()])\n    return film.title.indexOf(char) > -1 || film.title.indexOf(char.toLowerCase()) > -1 ? null : setCounter(counter - 1)\n  }\n\n  const isGameOver = () => {\n    return counter < 1\n  }\n\n  const fetchFilm = async (genre) => {\n    setFilm(EMPTY_FILM)\n    setGuessedLetters([' '])\n    setRevealed(false)\n    setCounter(MAX_ATTEMPTS)\n    const genreId = getGenreId(genre, genres) || { id: 99 }\n    const result = await fetch(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${API_MOVIEDB_KEY}&language=en-US&with_genres=${genreId.id}&sort_by=popularity.desc&include_adult=false&include_video=false&page=${getRandom(RESULTS_PAGES) + 1}`\n    ).then((response) => response.json())\n    let filmPosition = getRandom(result.results.length)\n    while (!testFilm(result.results[filmPosition].title)) {\n      filmPosition = getRandom(result.results.length)\n    }\n    setFilm(result.results[filmPosition]);\n  };\n  const gameOver = isGameOver()\n\n  useEffect(() => {\n    fetchGenres().then(result => setGenres(result.genres));\n  }, []);\n  useEffect(() => {\n    if (counter < 1) {\n      setGuessedLetters(allLetters)\n      setRevealed(true)\n    }\n  }, [counter]);\n  return (\n    <>\n      <Header appName={\"Hangman\"} appDescription={'Guess the film'} />\n\n      <GameBoard>\n        <div>\n          {genres && genres.length > 0 && <Dropdown title=\"Choose a genre\" options={genres} onClick={() => setFilm(EMPTY_FILM)} onChange={setSelectedGenre} />}\n          <Button onClick={() => fetchFilm(selectedGenre)}>Get film</Button>\n        </div>\n        {gameOver ? <div>Game over!</div> : null}\n        {film.title !== '' &&\n          <div>\n            <HiddenText filmArr={film.title.split('')} guessedLetters={letters} />\n            <LettersTray guessedLetters={letters} onClickHandler={onCharClickHandler} />\n            <div>Guesses left: {counter}</div>\n            {!isRevealed ?\n              <Button onClick={() => {\n                setGuessedLetters(allLetters)\n                setRevealed(true)\n              }\n              }>Reveal</Button> :\n              <>\n                < img src={`http://image.tmdb.org/t/p/w185${film.poster_path}`} alt=\"Film poster\" />\n                {film.overview || film.tagline ? <p>{film.overview || film.tagline}</p> : null}\n              </>\n            }\n          </div>\n        }\n      </GameBoard>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}