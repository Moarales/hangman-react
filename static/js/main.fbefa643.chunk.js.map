{"version":3,"sources":["style/assets/down_arrow.svg","style/shared.tsx","components/Header.tsx","components/HiddenText.tsx","helpers/index.tsx","components/LettersTray.tsx","components/GameControllers.tsx","components/FilmInfo.tsx","components/GameBoard.tsx","api/fetchGenres.tsx","components/Footer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","colours","Container","styled","header","Heading","h1","Description","p","Header","appName","appDescription","div","LetterContainer","span","props","letter","HiddenText","filmArr","guessedLetters","map","index","key","indexOf","upprecaseLettersArr","Array","q","w","String","fromCharCode","allLetters","toLowerCase","getRandom","max","Math","floor","random","getGenreId","genreName","genres","filter","genre","name","LettersContainer","Char","button","disabled","LettersTray","onClickHandler","char","i","onClick","value","Button","RoundButton","ButtonContainer","FlexResponsive","Text","DropdownContainer","Select","select","downArrowSvg","Dropdown","onChange","title","options","length","e","target","option","Info","Img","img","FilmInfo","film","src","poster_path","alt","overview","tagline","EMPTY_FILM","ContentContainer","GameBoard","useState","counter","setCounter","setFilm","setGenres","id","selectedGenre","setSelectedGenre","letters","setGuessedLetters","isRevealed","setRevealed","resetState","useEffect","a","async","fetch","process","then","response","json","result","remainingLetters","split","filmLetter","console","log","genresList","resetCurrentState","setNewFilm","genreId","filmPosition","results","str","test","fetchFilm","footer","Footer","children","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbefa643.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down_arrow.aa86276a.svg\";","export const colours = {\n  diamond: '#BCE7FD',\n  eucaliptus: '#40C9A2',\n  iceberg: '#6FC4CC',\n  lightest: '#e6f6fe',\n  maastrichtBlue: '#001242',\n  pictonBlue: '#2EB3E8',\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { colours } from '../style/shared'\n\nconst Container = styled.header`\n  width: 100%;\n  background-color: ${colours.maastrichtBlue};\n  color: ${colours.diamond};\n  font-weight: bold;\n  font-family: 'Courier New', Courier, monospace;\n  padding: 16px 32px;\n`\n\nconst Heading = styled.h1`\n  margin: 0;\n`\n\nconst Description = styled.p`\n  margin: 0;\n  color: ${colours.pictonBlue};\n`\n\ninterface IHeaderProps {\n  appName: string\n  appDescription: string\n}\n\nconst Header = ({ appName, appDescription }: IHeaderProps) => (\n  <Container>\n    <Heading>{appName}</Heading>\n    <Description>{appDescription}</Description>\n  </Container>\n)\n\nexport default Header\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { colours } from '../style/shared'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 16px 32px;\n  font-family: 'Roboto';\n`\n\ninterface ILetterContainer {\n  letter: string\n}\n\nconst LetterContainer = styled.span<ILetterContainer>`\n  padding: 0 8px;\n  display: inline-block;\n  border-bottom: ${(props) =>\n    props.letter === ' ' ? 'none' : `2px solid ${colours.maastrichtBlue}`};\n  width: 20px;\n  padding: 2px;\n  text-align: center;\n  margin-right: 4px;\n  font-size: 20px;\n  @media (min-width: 420px) {\n    font-size: 22px;\n  }\n`\n\ninterface IFilmArr {\n  filmArr: string[]\n  guessedLetters: string[]\n}\nconst HiddenText = ({ filmArr, guessedLetters }: IFilmArr) => (\n  <Container>\n    {filmArr.map((letter, index) => (\n      <LetterContainer key={index} letter={letter}>\n        {guessedLetters.indexOf(letter) > -1 ? letter : '?'}\n      </LetterContainer>\n    ))}\n  </Container>\n)\n\nexport default HiddenText\n","export const upprecaseLettersArr = [...Array(26)].map((q, w) =>\n  String.fromCharCode(w + 65)\n)\n\nexport const allLetters = [\n  ' ',\n  \"'\",\n  ':',\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  ...upprecaseLettersArr,\n  ...upprecaseLettersArr.map((letter) => letter.toLowerCase())\n]\n\nexport const getRandom = (max: number) => Math.floor(max * Math.random())\n\nexport const testFilm = (str: string) => {\n  const regex = /^[A-Za-z ]+$/\n  return regex.test(str)\n}\n\nexport const getGenreId = (genreName: any, genres: any) => {\n  const selectedGenre = genres.filter((genre: any) => genreName === genre.name)\n  return selectedGenre[0]\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { colours } from '../style/shared'\nimport { upprecaseLettersArr } from '../helpers'\n\nconst LettersContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin: 16px auto;\n  font-family: 'Roboto';\n`\n\nexport const Char = styled.button`\n  padding: 8px;\n  font-weight: bold;\n  margin: 2px;\n  width: 10%;\n  background-color: ${(props) => (props.disabled ? 'white' : colours.pictonBlue)};\n  color: ${(props) => (props.disabled ? colours.diamond : 'white')};\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n  border-radius: 2px;\n  border: 0;\n  @media (min-width: 420px) {\n    font-size: 18px;\n  }\n`\n\nconst LettersTray = ({ guessedLetters, onClickHandler }: any) => (\n  <LettersContainer>\n    {upprecaseLettersArr.map((char, i) => (\n      <Char\n        onClick={() => onClickHandler(char)}\n        key={i}\n        value={char}\n        disabled={guessedLetters.indexOf(char) > -1}\n      >\n        {char}\n      </Char>\n    ))}\n  </LettersContainer>\n)\n\nexport default LettersTray\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { colours } from '../style/shared'\nimport downArrowSvg from '../style/assets/down_arrow.svg'\n\nexport const Button = styled.button`\n  color: white;\n  background-color: ${colours.iceberg};\n  font-weight: bold;\n  padding: 8px 16px;\n  text-align: center;\n  -webkit-transition-duration: 0.2s; /* Safari */\n  transition-duration: 0.2s;\n  border: none;\n  width: auto;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n  border-radius: 2px;\n  &:hover {\n    background-color: ${colours.maastrichtBlue};\n    color: ${colours.lightest};\n  }\n  @media (min-width: 420px) {\n    font-size: 18px;\n    width: auto;\n  }\n`\n\nexport const RoundButton = styled(Button)`\n  border-radius: 50%;\n  width: 90px;\n  height: 90px;\n  align-self: flex-end;\n  margin: 0 auto;\n`\n\nexport const ButtonContainer = styled.div`\n  width: 100%;\n  @media (min-width: 420px) {\n    width: 49%;\n  }\n`\n\nexport const FlexResponsive = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @media (min-width: 420px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n`\n\nconst Text = styled.span`\n  width: 220px;\n  font-family: 'Roboto';\n  @media (min-width: 420px) {\n    font-size: 18px;\n  }\n`\n\nconst DropdownContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  padding-bottom: 8px;\n  @media (min-width: 420px) {\n    width: 49%;\n    padding-bottom: 0;\n  }\n`\n\nconst Select = styled.select`\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-color: white;\n  background-image: url(${downArrowSvg});\n  background-size: 8px;\n  background-repeat: no-repeat;\n  background-position-y: 50%;\n  background-position-x: calc(100% - 8px);\n  text-align: left;\n  padding: 8px;\n  cursor: pointer;\n  width: 100%;\n  border: 1px solid black;\n  border: none;\n  border-radius: 2px;\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\n  @media (min-width: 420px) {\n    font-size: 18px;\n  }\n`\n\ninterface IOption {\n  name: string\n}\n\ninterface IDropdown {\n  options: IOption[]\n  onClick: any\n  onChange: any\n  title: string\n}\n\nexport const Dropdown = ({ onClick, onChange, title, options }: IDropdown) => (\n  <DropdownContainer>\n    {title && title.length > 0 && <Text>{title}</Text>}\n    <Select onClick={() => onClick('')} onChange={(e) => onChange(e.target.value)}>\n      <option value={''}>Choose a genre:</option>\n      {options.map((option, index) => (\n        <option key={index} value={option.name}>\n          {option.name}\n        </option>\n      ))}\n    </Select>\n  </DropdownContainer>\n)\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: 'Roboto';\n  @media (min-width: 420px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n`\n\nconst Info = styled.p`\n  margin: 16px 32px;\n`\n\nconst Img = styled.img`\n  width: 154px;\n`\n\ninterface IFilm {\n  title: string\n  poster_path: string\n  tagline?: string\n  overview?: string\n}\n\ninterface IFilmProps {\n  film: IFilm\n}\n\nconst FilmInfo = ({ film }: IFilmProps) => {\n  return (\n    <Container>\n      <Img\n        src={`http://image.tmdb.org/t/p/w154${film.poster_path}`}\n        alt=\"Film poster\"\n      />\n      {film.overview || film.tagline ? (\n        <Info>{film.overview || film.tagline}</Info>\n      ) : null}\n    </Container>\n  )\n}\n\nexport default FilmInfo\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nimport { colours } from '../style/shared'\nimport HiddenText from '../components/HiddenText'\nimport LettersTray from '../components/LettersTray'\nimport { allLetters } from '../helpers'\nimport { fetchGenres, fetchFilm } from '../api/fetchGenres'\nimport {\n  Button,\n  ButtonContainer,\n  RoundButton,\n  FlexResponsive,\n  Dropdown\n} from '../components/GameControllers'\nimport FilmInfo from '../components/FilmInfo'\n\nconst MAX_ATTEMPTS = 7\nconst EMPTY_FILM = { title: '', poster_path: '' }\n\nconst Container = styled.div`\n  width: 100%;\n  color: ${colours.maastrichtBlue};\n  padding: 16px 32px;\n  background-color: ${colours.lightest};\n  min-height: calc(100vh - 130px);\n  @media (min-width: 420px) {\n    font-size: 18px;\n  }\n`\n\nconst ContentContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n`\n\nconst Text = styled.p`\n  font-family: 'Roboto';\n  @media (min-width: 420px) {\n    font-size: 18px;\n  }\n`\n\nconst GameBoard = () => {\n  const [counter, setCounter] = useState(MAX_ATTEMPTS)\n  const [film, setFilm] = useState(EMPTY_FILM)\n  const [genres, setGenres] = useState<any[]>([])\n  const [selectedGenre, setSelectedGenre] = useState({ id: 99 })\n  const [letters, setGuessedLetters] = useState([' '])\n  const [isRevealed, setRevealed] = useState(false)\n\n  const onCharClickHandler = (char: string) => {\n    setGuessedLetters([...letters, char, char.toLowerCase()])\n    return film.title.indexOf(char) > -1 ||\n      film.title.indexOf(char.toLowerCase()) > -1\n      ? null\n      : setCounter(counter - 1)\n  }\n\n  const onRevealClickHandler = () => {\n    setGuessedLetters(allLetters)\n    setRevealed(true)\n  }\n\n  const resetState = () => {\n    setFilm(EMPTY_FILM)\n    setGuessedLetters([' '])\n    setRevealed(false)\n    setCounter(MAX_ATTEMPTS)\n  }\n\n  useEffect(() => {\n    fetchGenres().then((result) => setGenres(result.genres))\n  }, [])\n  useEffect(() => {\n    if (counter < 1) {\n      setGuessedLetters(allLetters)\n      setRevealed(true)\n    }\n  }, [counter])\n  useEffect(() => {\n    const remainingLetters = film.title\n      .split('')\n      .filter((filmLetter) => letters.indexOf(filmLetter) === -1)\n    if (film.title !== '' && remainingLetters.length === 0) {\n      setRevealed(true)\n    }\n  }, [film.title, letters])\n  console.log(film)\n  return (\n    <Container>\n      <ContentContainer>\n        <FlexResponsive>\n          {genres && genres.length > 0 && (\n            <Dropdown\n              options={genres}\n              title=\"\"\n              onClick={() => setFilm(EMPTY_FILM)}\n              onChange={setSelectedGenre}\n            />\n          )}\n          <ButtonContainer>\n            <Button onClick={() => fetchFilm(selectedGenre, genres, resetState, setFilm)}>\n              Hit me!\n            </Button>\n          </ButtonContainer>\n        </FlexResponsive>\n        {film.title !== '' && (\n          <div>\n            <HiddenText filmArr={film.title.split('')} guessedLetters={letters} />\n            <LettersTray\n              guessedLetters={letters}\n              onClickHandler={onCharClickHandler}\n            />\n            <Text>{counter > 0 ? `Guesses left: ${counter}` : null}</Text>\n            {!isRevealed ? (\n              <RoundButton onClick={onRevealClickHandler}>\n                Reveal\n              </RoundButton>\n            ) : (\n                <FilmInfo film={film} />\n              )}\n          </div>\n        )}\n      </ContentContainer>\n    </Container>\n  )\n}\n\nexport default GameBoard\n","import { getRandom, testFilm, getGenreId } from '../helpers'\n\nconst API_MOVIEDB_KEY = process.env.REACT_APP_MOVIEDB_API_KEY\nconst RESULTS_PAGES = 5\n\nexport const fetchGenres = async () => {\n  return await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_MOVIEDB_KEY}&language=en-US`\n  ).then((response) => response.json())\n}\n\ninterface IGenre {\n  id?: number\n  name?: string\n}\n\nexport const fetchFilm = async (genre: IGenre, genresList: IGenre[], resetCurrentState: VoidFunction, setNewFilm: any) => {\n  resetCurrentState()\n  const genreId = getGenreId(genre, genresList) || { id: 99 }\n  const result = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${API_MOVIEDB_KEY}&language=en-US&with_genres=${\n    genreId.id\n    }&sort_by=popularity.desc&include_adult=false&include_video=false&page=${getRandom(\n      RESULTS_PAGES\n    ) + 1}`\n  ).then((response) => response.json())\n  let filmPosition = getRandom(result.results.length)\n  while (!testFilm(result.results[filmPosition].title)) {\n    filmPosition = getRandom(result.results.length)\n  }\n  setNewFilm(result.results[filmPosition])\n}\n\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { colours } from '../style/shared'\n\nconst Container = styled.footer`\n  width: 100%;\n  color: ${colours.diamond};\n  background-color: ${colours.pictonBlue};\n  font-weight: bold;\n  font-family: 'Courier New', Courier, monospace;\n  padding: 16px 32px;\n  text-align: center;\n`\n\nconst Description = styled.p`\n  margin: 0;\n  & a {\n    color: inherit;\n  }\n`\n\ninterface IProps {\n  children: JSX.Element[] | JSX.Element\n}\n\nconst Footer: FunctionComponent<IProps> = ({ children }) => (\n  <Container>\n    <Description>\n      {children}\n    </Description>\n  </Container>\n)\n\nexport default Footer\n","import React from 'react'\n\nimport Header from './components/Header'\nimport GameBoard from './components/GameBoard'\nimport Footer from './components/Footer'\n\n\nconst App = () => (\n  <>\n    <Header appName={'Hangman'} appDescription={'Guess the film'} />\n    <GameBoard />\n    <Footer>\n      <span>This project is available on{' '}\n        <a href=\"https://github.com/zurda/hangman-react\">Github</a></span>\n    </Footer>\n  </>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}