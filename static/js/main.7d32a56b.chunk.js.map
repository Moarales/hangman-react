{"version":3,"sources":["components/Header.js","components/HiddenText.js","helpers/letters.js","components/LettersTray.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","header","Heading","h1","Description","p","Header","appName","appDescription","LetterContainer","span","props","letter","HiddenText","filmArr","guessedLetters","map","index","key","indexOf","upprecaseLettersArr","Array","q","w","String","fromCharCode","allLetters","toLowerCase","Char","button","LettersTray","onClickHandler","char","i","onClick","e","target","innerHTML","value","disabled","API_MOVIEDB_KEY","process","MAX_ATTEMPTS","getRandomFilm","arrayLength","Math","floor","random","getGenreId","genreName","genres","filter","genre","name","App","useState","counter","setCounter","filmName","setFilmName","setGenres","selectedGenre","setSelectedGenre","letters","setGuessedLetters","useEffect","a","async","fetch","then","response","json","result","fetchGenres","className","length","onChange","id","genreId","filmPosition","results","title","fetchFilm","split","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"opBAGA,IAAMA,EAAYC,IAAOC,OAAV,KASTC,EAAUF,IAAOG,GAAV,KAIPC,EAAcJ,IAAOK,EAAV,KAYFC,EAPA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,eAAZ,OACb,kBAACT,EAAD,KACE,kBAACG,EAAD,KAAUK,GACV,kBAACH,EAAD,KAAcI,K,6NCrBlB,IAAMC,EAAkBT,IAAOU,KAAV,KAKF,SAAAC,GAAK,MAAqB,MAAjBA,EAAMC,OAAiB,OAAS,qBAe7CC,EARI,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eAC7B,OACE,oCACGD,EAAQE,KAAI,SAACJ,EAAQK,GAAT,OAAmB,kBAACR,EAAD,CAAiBS,IAAKD,EAAOL,OAAQA,GAASG,EAAeI,QAAQP,IAAW,EAAIA,EAAS,UClBtHQ,EAAsB,YAAIC,MAAM,KAAKL,KAAI,SAACM,EAAGC,GAAJ,OAAUC,OAAOC,aAAaF,EAAI,OAC3EG,EAAU,CAAI,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAA3C,mBAAiDN,GAAjD,YAAyEA,EAAoBJ,KAAI,SAAAJ,GAAM,OAAIA,EAAOe,mB,8HCEzI,IAAMC,EAAO5B,IAAO6B,OAAV,KAQKC,EAFK,SAAC,GAAD,IAAGf,EAAH,EAAGA,eAAgBgB,EAAnB,EAAmBA,eAAnB,OAAwC,6BAAMX,EAAoBJ,KAAI,SAACgB,EAAMC,GAAP,OAAa,kBAACL,EAAD,CAAMM,QAAS,SAAAC,GAAC,OAAIJ,EAAeI,EAAEC,OAAOC,YAAYnB,IAAKe,EAAGK,MAAON,EAAMO,SAAUxB,EAAeI,QAAQa,IAAS,GAAIA,QCF5NQ,EAAkBC,mCAClBC,EAAe,EAEfC,EAAgB,SAACC,GACrB,OAAOC,KAAKC,MAAMF,EAAcC,KAAKE,WAGjCC,EAAa,SAACC,EAAWC,GAE7B,OADsBA,EAAOC,QAAO,SAAAC,GAAK,OAAIH,IAAcG,EAAMC,QAC5C,IA+DRC,MA1Df,WAAgB,IAAD,EACiBC,mBAASb,GAD1B,mBACNc,EADM,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGeJ,mBAAS,IAHxB,mBAGNL,EAHM,KAGEU,EAHF,OAI6BL,mBAAS,SAJtC,mBAINM,EAJM,KAISC,EAJT,OAKwBP,mBAAS,CAAC,MALlC,mBAKNQ,EALM,KAKGC,EALH,KAmCb,OATAC,qBAAU,YACY,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACGE,MAAM,yDAAD,OACiC5B,EADjC,oBAExB6B,MAAK,SAACC,GAAD,OAAcA,EAASC,WAHZ,OACZC,EADY,OAIlBZ,EAAUY,EAAOtB,QAJC,qCAMpBuB,KACC,IAED,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQnE,QAAS,UAAWC,eAAgB,mBAC3C0C,GAAUA,EAAOyB,OAAS,EACzB,4BAAQrC,MAAOuB,EAAe3B,QAAS,kBAAMyB,EAAY,KAAKiB,SAAU,SAAAzC,GAAC,OAAI2B,EAAiB3B,EAAEC,OAAOE,SACrG,4BAAQA,MAAO,IAAf,kBACCY,EAAOlC,KAAI,SAAAoC,GAAK,OAAI,4BAAQlC,IAAKkC,EAAMyB,GAAIvC,MAAOc,EAAMC,MAAOD,EAAMC,UAC5D,KACd,4BAAQnB,QAAS,kBA9BH,SAAOkB,GAAP,mBAAAc,EAAAC,OAAA,uDAChBR,EAAY,IACZK,EAAkB,KAClBP,EAAWf,GACLoC,EAAU9B,EAAWI,EAAOF,IAAW,CAAE2B,GAAI,IAJnC,WAAAX,EAAA,MAKKE,MAAM,uDAAD,OAC+B5B,EAD/B,uCAC6EsC,EAAQD,GADrF,4EAExBR,MAAK,SAACC,GACN,OAAOA,EAASC,WARF,OAKVC,EALU,OAUVO,EAAepC,EAAc6B,EAAOQ,QAAQL,QAClDhB,EAAYa,EAAOQ,QAAQD,GAAcE,OAXzB,qCA8BSC,CAAUrB,KAAjC,YAEc,KAAbH,GACC,6BACE,8CAAoBF,GACpB,4BAAQtB,QAAS,kBAAM8B,EAAkBtC,KAAzC,UACA,kBAAC,EAAD,CAAYZ,QAAS4C,EAASyB,MAAM,IAAKpE,eAAgBgD,IACzD,kBAAC,EAAD,CAAahD,eAAgBgD,EAAShC,eA3CnB,SAACC,GAG1B,OAFAgC,EAAkB,GAAD,mBAAKD,GAAL,CAAc/B,EAAMA,EAAKL,iBAEnC+B,EAASvC,QAAQa,IAAS,GAAK0B,EAASvC,QAAQa,EAAKL,gBAAkB,EAAI,KAAO8B,EAAWD,EAAU,SCnB9F4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.7d32a56b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.header`\n  width: 100%; \n  background-color: #FCF6B1;\n  color: #E3170A;\n  font-weight: bold;\n  font-family: 'Courier New', Courier, monospace;\n  padding: 16px 32px;\n`\n\nconst Heading = styled.h1`\nmargin: 0;\n`\n\nconst Description = styled.p`\nmargin: 0;\ncolor: #2D1E2F;\n`\n\nconst Header = ({ appName, appDescription }) => (\n  <Container>\n    <Heading>{appName}</Heading>\n    <Description>{appDescription}</Description>\n  </Container>\n)\n\nexport default Header ","import React from 'react'\nimport styled from '@emotion/styled'\n\nconst LetterContainer = styled.span`\n  font-size: 16px;\n  height: 24px;\n  padding: 0 8px;\n  display: inline-block;\n  border-bottom: ${props => props.letter === ' ' ? 'none' : '2px solid black'};\n  text-align: center;\n  margin-right: 4px;\n`\n\n\n\nconst HiddenText = ({ filmArr, guessedLetters }) => {\n  return (\n    <>\n      {filmArr.map((letter, index) => <LetterContainer key={index} letter={letter}>{guessedLetters.indexOf(letter) > -1 ? letter : '?'}</LetterContainer>)}\n    </>\n  )\n}\n\nexport default HiddenText","export const upprecaseLettersArr = [...Array(26)].map((q, w) => String.fromCharCode(w + 65))\nexport const allLetters = [' ', \"'\", \":\", 1, 2, 3, 4, 5, 6, 7, 8, 9, ...upprecaseLettersArr, ...upprecaseLettersArr.map(letter => letter.toLowerCase())]","import React from 'react'\nimport styled from '@emotion/styled'\nimport { upprecaseLettersArr } from '../helpers/letters'\nconst Char = styled.button`\n  padding: 8px;\n  font-weight: bold;\n  margin: 2px;\n`\n\nconst LettersTray = ({ guessedLetters, onClickHandler }) => <div>{upprecaseLettersArr.map((char, i) => <Char onClick={e => onClickHandler(e.target.innerHTML)} key={i} value={char} disabled={guessedLetters.indexOf(char) > -1}>{char}</Char>)}</div >\n\nexport default LettersTray","import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header'\nimport HiddenText from './components/HiddenText'\nimport LettersTray from './components/LettersTray'\nimport { allLetters } from './helpers/letters'\n\nconst API_MOVIEDB_KEY = process.env.REACT_APP_MOVIEDB_API_KEY;\nconst MAX_ATTEMPTS = 7\n\nconst getRandomFilm = (arrayLength) => {\n  return Math.floor(arrayLength * Math.random())\n}\n\nconst getGenreId = (genreName, genres) => {\n  const selectedGenre = genres.filter(genre => genreName === genre.name)\n  return selectedGenre[0]\n}\n\n\n\nfunction App() {\n  const [counter, setCounter] = useState(MAX_ATTEMPTS)\n  const [filmName, setFilmName] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('Drama');\n  const [letters, setGuessedLetters] = useState([' ']);\n\n  const onCharClickHandler = (char) => {\n    setGuessedLetters([...letters, char, char.toLowerCase()])\n\n    return filmName.indexOf(char) > -1 || filmName.indexOf(char.toLowerCase()) > -1 ? null : setCounter(counter - 1)\n  }\n\n  const fetchFilm = async (genre) => {\n    setFilmName('')\n    setGuessedLetters(' ')\n    setCounter(MAX_ATTEMPTS)\n    const genreId = getGenreId(genre, genres) || { id: 99 }\n    const result = await fetch(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${API_MOVIEDB_KEY}&language=en-US&with_genres=${genreId.id}&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`\n    ).then((response) => {\n      return response.json();\n    })\n    const filmPosition = getRandomFilm(result.results.length)\n    setFilmName(result.results[filmPosition].title);\n  };\n  useEffect(() => {\n    const fetchGenres = async () => {\n      const result = await fetch(\n        `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_MOVIEDB_KEY}&language=en-US`,\n      ).then((response) => response.json());\n      setGenres(result.genres);\n    };\n    fetchGenres();\n  }, []);\n  return (\n    <div className=\"App\">\n      <Header appName={\"Hangman\"} appDescription={'Guess the film'} />\n      {genres && genres.length > 0 ?\n        <select value={selectedGenre} onClick={() => setFilmName('')} onChange={e => setSelectedGenre(e.target.value)}>\n          <option value={''}>Choose a genre</option>\n          {genres.map(genre => <option key={genre.id} value={genre.name}>{genre.name}</option>)}\n        </select> : null}\n      <button onClick={() => fetchFilm(selectedGenre)}>Get film</button>\n\n      {filmName !== '' &&\n        <div>\n          <div>Guesses left: {counter}</div>\n          <button onClick={() => setGuessedLetters(allLetters)}>Reveal</button>\n          <HiddenText filmArr={filmName.split('')} guessedLetters={letters} />\n          <LettersTray guessedLetters={letters} onClickHandler={onCharClickHandler} />\n        </div>\n      }\n\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}